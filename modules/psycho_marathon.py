# –∫–æ–¥/modules/psycho_marathon.py

import logging
import os
import json
import asyncio
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import MARATHONS, TUTORIALS, TIMEZONE, GOOGLE_SHEET_NAME
from .user_management import UserState
from database.db import Database
from modules.logging_service import LoggingService
from modules.quiz_handler import start_mak_quiz

logger = logging.getLogger(__name__)

# --- GOOGLE SHEETS AUTHENTICATION & CACHING ---
schedule_cache = {}
cache_timestamp = None
CACHE_TTL = timedelta(minutes=5)

def get_gsheet_client():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    try:
        creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json_str:
            logger.error("Google credentials JSON not found in environment variables.")
            return None
        creds_dict = json.loads(creds_json_str)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/drive.readonly"
        ]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        logger.error(f"Failed to authenticate with Google Sheets: {e}", exc_info=True)
        return None

def get_marathon_schedule_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global schedule_cache, cache_timestamp
    now = datetime.now()

    if schedule_cache and cache_timestamp and (now - cache_timestamp < CACHE_TTL):
        logger.info("Using cached marathon schedule.")
        return schedule_cache

    client = get_gsheet_client()
    if not client:
        return {}
    try:
        spreadsheet = client.open(GOOGLE_SHEET_NAME)
        sheet = spreadsheet.worksheet("MarathonContent")
        records = sheet.get_all_records()
        
        schedule = {}
        for record in records:
            program_id = record.get("marathon_id")
            if program_id:
                if program_id not in schedule:
                    schedule[program_id] = []
                schedule[program_id].append(record)
        
        for mid in schedule:
            schedule[mid].sort(key=lambda x: (int(x.get('day', 0)), int(x.get('post_id', 0))))

        schedule_cache = schedule
        cache_timestamp = now
        logger.info(f"Successfully loaded and cached schedule for {len(schedule)} programs from Google Sheet.")
        return schedule
    except gspread.exceptions.WorksheetNotFound:
        logger.error(f"Worksheet 'MarathonContent' not found.")
        return {}
    except Exception as e:
        logger.error(f"Failed to read from Google Sheet: {e}", exc_info=True)
        return {}

# --- POST SENDING LOGIC ---
async def send_post_and_schedule_next(bot: Bot, scheduler: AsyncIOScheduler, user_id: int, program_id: str, post_id_to_send: int, state: FSMContext, logger_service: LoggingService):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç/–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π.
    """
    logger.info(f"send_post_and_schedule_next –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}, program_id={program_id}, post_id_to_send={post_id_to_send}")
    schedule = get_marathon_schedule_from_sheet().get(program_id, [])
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(schedule)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}")
    current_post_data = next((p for p in schedule if p.get('post_id') and int(p.get('post_id')) == post_id_to_send), None)
    
    if not current_post_data:
        logger.warning(f"Post ID {post_id_to_send} not found for {program_id}. Stopping for user {user_id}.")
        return

    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ü–†–û–°–û–í ---
        poll_question = current_post_data.get("poll_question", "")
        if poll_question:
            poll_options_str = current_post_data.get("poll_options", "")
            options = [opt.strip() for opt in poll_options_str.split(';') if opt.strip()]
            is_anonymous = str(current_post_data.get("poll_is_anonymous", "TRUE")).upper() == "TRUE"
            
            if len(options) >= 2:
                await bot.send_poll(
                    chat_id=user_id,
                    question=poll_question,
                    options=options,
                    is_anonymous=is_anonymous
                )
                logger.info(f"Sent poll {program_id}/{current_post_data['day']}/{post_id_to_send} to user {user_id}")
            else:
                logger.warning(f"Not enough options to create a poll for post ID {post_id_to_send}. Skipping.")

        # --- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞/–∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
        else:
            text = current_post_data.get("text", "").replace("<br>", "\n")
            image_url = current_post_data.get("image_url", "")
            
            current_index = schedule.index(current_post_data)
            next_index = current_index + 1
            reply_markup = None

            if next_index < len(schedule):
                next_post_data = schedule[next_index]
                if next_post_data.get("trigger_type") == "button":
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data=f"next_step_{program_id}_{next_post_data['post_id']}")]])
                    reply_markup = keyboard

            if image_url:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º caption –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
                caption = text[:1024] if len(text) > 1024 else text
                await bot.send_photo(user_id, photo=image_url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if len(text) > 1024:
                    remaining_text = text[1024:]
                    await bot.send_message(user_id, text=remaining_text, parse_mode="HTML")
            elif text:
                await bot.send_message(user_id, text=text, parse_mode="HTML", reply_markup=reply_markup)
            
            logger.info(f"Sent post {program_id}/{current_post_data['day']}/{post_id_to_send} to user {user_id}")

        await state.update_data(last_post_id=current_post_data['post_id'])
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    except Exception as e:
        logger.error(f"Failed to send post content to user {user_id}: {e}", exc_info=True)
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
    current_index = schedule.index(current_post_data)
    next_index = current_index + 1
    if next_index < len(schedule):
        next_post_data = schedule[next_index]
        if next_post_data.get("trigger_type") == "delay":
            trigger_value = next_post_data.get("trigger_value")
            try:
                delay_seconds = 0
                if 'm' in str(trigger_value): delay_seconds = int(str(trigger_value).replace('m', '')) * 60
                elif 'h' in str(trigger_value): delay_seconds = int(str(trigger_value).replace('h', '')) * 3600
                
                run_date = datetime.now(TIMEZONE) + timedelta(seconds=delay_seconds)
                scheduler.add_job(send_post_and_schedule_next, 'date', run_date=run_date, args=[bot, scheduler, user_id, program_id, next_post_data['post_id'], state, logger_service], id=f"prog:{user_id}:{program_id}:{next_post_data['post_id']}")
                logger.info(f"Scheduled next post for user {user_id} at {run_date.strftime('%Y-%m-%d %H:%M:%S')}")
            except (ValueError, TypeError) as e:
                logger.error(f"Invalid delay format '{trigger_value}' for post {next_post_data.get('post_id')}: {e}")
    else:
        logger.info(f"User {user_id} has completed program '{program_id}'.")
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
        if program_id == "mak_tutorial":
            await bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –æ–±—É—á–µ–Ω–∏—è! üéâ")
            # –ü–µ—Ä–µ–¥–∞–µ–º message-like –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–≤–∏–∑–∞
            mock_message = types.Message(
                message_id=1,
                date=datetime.now(),
                chat=types.Chat(id=user_id, type="private"), 
                from_user=types.User(id=user_id, is_bot=False, first_name="User")
            )
            await start_mak_quiz(mock_message, state, logger_service, bot)
        else:
            await bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç –±–ª–æ–∫! üéâ")
            await state.clear()

async def handle_training_command(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    logger.info(f"handle_training_command –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={message.from_user.id}")
    await state.clear()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="list_tutorials")]])
    logger.info("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å callback_data=list_tutorials")
    await message.answer("–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã. ‚ú®", reply_markup=keyboard)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—É—á–∞—é—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏")

async def handle_marathon_command(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="list_marathons")]])
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤. üèÉ‚Äç‚ôÄÔ∏è", reply_markup=keyboard)

async def list_programs_callback(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"list_programs_callback –≤—ã–∑–≤–∞–Ω —Å callback_data={callback.data}")
    program_type = callback.data.split("_")[1]
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω program_type={program_type}")
    
    programs = TUTORIALS if program_type == "tutorials" else MARATHONS
    logger.info(f"–í—ã–±—Ä–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã: {list(programs.keys())}")
    
    title = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å:" if program_type == "tutorials" else "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω:"
    buttons = [[types.InlineKeyboardButton(text=settings["name"], callback_data=f"program_{prog_id}")] for prog_id, settings in programs.items()]
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫: {[btn[0].text for btn in buttons]}")
    
    await callback.message.edit_text(title, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()
    logger.info("list_programs_callback –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

async def program_selection_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, logger_service: LoggingService):
    logger.info(f"program_selection_callback –≤—ã–∑–≤–∞–Ω —Å callback_data={callback.data}")
    # –£–±–∏—Ä–∞–µ–º "program_" –∏ –ø–æ–ª—É—á–∞–µ–º program_id
    program_id = callback.data.replace("program_", "")
    user_id = callback.from_user.id
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω program_id={program_id}, user_id={user_id}")
    
    all_programs = {**TUTORIALS, **MARATHONS}
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {list(all_programs.keys())}")

    if program_id in all_programs:
        program_name = all_programs[program_id]["name"]
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞: {program_name}")
        
        await state.set_state(UserState.in_marathon)
        await state.update_data(current_program=program_id)
        await callback.message.edit_text(f"–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É \"{program_name}\"! –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... üöÄ")
        
        schedule = get_marathon_schedule_from_sheet().get(program_id, [])
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(schedule)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}")
        
        first_post = next((p for p in schedule if p.get('day') and int(p.get('day')) == 1 and p.get('trigger_type') == 'immediate'), None)
        logger.info(f"–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {first_post}")

        if first_post:
            logger.info(f"–ó–∞–ø—É—Å–∫–∞—é send_post_and_schedule_next –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
            asyncio.create_task(send_post_and_schedule_next(bot, scheduler, user_id, program_id, first_post['post_id'], state, logger_service))
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}")
            await callback.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    else:
        logger.error(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback.answer()
    logger.info("program_selection_callback –∑–∞–≤–µ—Ä—à–µ–Ω")

async def next_step_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, logger_service: LoggingService):
    user_id = callback.from_user.id
    logger.info(f"next_step_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id} —Å callback_data: {callback.data}")
    
    try:
        # –£–±–∏—Ä–∞–µ–º "next_step_" –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        data_without_prefix = callback.data.replace("next_step_", "")
        logger.info(f"callback_data –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {data_without_prefix}")
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–¥–µ–ª—è–µ—Ç program_id –æ—Ç post_id
        last_underscore_index = data_without_prefix.rfind("_")
        if last_underscore_index == -1:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –≤ callback_data: {data_without_prefix}")
            await callback.answer("–û—à–∏–±–∫–∞! –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.")
            return
            
        program_id = data_without_prefix[:last_underscore_index]
        next_post_id_str = data_without_prefix[last_underscore_index + 1:]
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: program_id={program_id}, next_post_id_str={next_post_id_str}")
        
        next_post_id = int(next_post_id_str)
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π next_post_id: {next_post_id}")
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥...")
        
        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é send_post_and_schedule_next –¥–ª—è user_id={user_id}, program_id={program_id}, next_post_id={next_post_id}")
        asyncio.create_task(send_post_and_schedule_next(bot, scheduler, user_id, program_id, next_post_id, state, logger_service))
        
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid callback data for next step: {callback.data}, error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞! –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.")