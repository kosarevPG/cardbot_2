# –∫–æ–¥/notification_service.py

import asyncio
from datetime import datetime
from config import TIMEZONE
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é
from modules.card_of_the_day import get_main_menu

class NotificationService:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        # –£–±—Ä–∞–ª basicConfig –æ—Ç—Å—é–¥–∞, –ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤ main.py
        self.logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

    async def check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        while True:
            try:
                now = datetime.now(TIMEZONE)
                current_time_str = now.strftime("%H:%M")
                today = now.date()
                reminders_data = self.db.get_reminder_times() # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {user_id: {'morning': t1, 'evening': t2}}

                for user_id, times in reminders_data.items():
                    user_data = self.db.get_user(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
                    name = user_data.get("name", "")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ö–∞—Ä—Ç–∞ –î–Ω—è)
                    morning_time = times.get('morning')
                    if morning_time == current_time_str and self.db.is_card_available(user_id, today):
                        text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú®" if name else "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã—Ç—è–Ω—É—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è. ‚ú®"
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å
                            await self.bot.send_message(user_id, text, reply_markup=await get_main_menu(user_id, self.db))
                            self.logger.info(f"Morning reminder sent to user {user_id} at {now}")
                            # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ logger_service?
                        except Exception as e:
                            self.logger.error(f"Failed to send MORNING reminder to user {user_id}: {e}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ò—Ç–æ–≥ –î–Ω—è)
                    evening_time = times.get('evening')
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
                    # today_str = today.strftime('%Y-%m-%d')
                    # reflection_exists = await self.db.check_evening_reflection_exists(user_id, today_str) # –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ DB
                    # if evening_time == current_time_str and not reflection_exists:
                    if evening_time == current_time_str: # –ü–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                        text = f"{name}, –ø—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –¥–Ω—è üåô" if name else "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –¥–Ω—è üåô"
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                            await self.bot.send_message(user_id, text, reply_markup=await get_main_menu(user_id, self.db))
                            self.logger.info(f"Evening reminder sent to user {user_id} at {now}")
                        except Exception as e:
                            self.logger.error(f"Failed to send EVENING reminder to user {user_id}: {e}")

            except Exception as loop_err:
                self.logger.error(f"Error in reminder check loop: {loop_err}", exc_info=True)
                # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ —Ü–∏–∫–ª–µ
                await asyncio.sleep(300) # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞

            await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ send_broadcast) ...

    async def send_broadcast(self, broadcast_data):
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f"Starting broadcast with datetime: {broadcast_data['datetime']}, recipients: {broadcast_data['recipients']}")

        while True:
            now = datetime.now(TIMEZONE)
            logging.info(f"Current time: {now}, Target time: {broadcast_data['datetime']}")

            if now >= broadcast_data["datetime"]:
                recipients = self.db.get_all_users() if broadcast_data["recipients"] == "all" else broadcast_data["recipients"]
                for user_id in recipients:
                    name = self.db.get_user(user_id)["name"]
                    text = f"{name}, {broadcast_data['text']}" if name else broadcast_data["text"]
                    try:
                        await self.bot.send_message(user_id, text)
                        logging.info(f"Broadcast sent to user {user_id} at {now}")
                    except Exception as e:
                        logging.error(f"Failed to send broadcast to user {user_id}: {e}")
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            else:
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 —Å–µ–∫—É–Ω–¥)
                time_to_wait = (broadcast_data["datetime"] - now).total_seconds()
                wait_seconds = min(time_to_wait, 60)  # –ñ–¥—ë–º –Ω–µ –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥ –∑–∞ —Ä–∞–∑
                logging.info(f"Waiting {wait_seconds} seconds until broadcast time")
                await asyncio.sleep(wait_seconds)
