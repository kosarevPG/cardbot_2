# –∫–æ–¥/evening_reflection.py

import logging
from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F, Router # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from modules.user_management import UserState
from database.db import Database
from modules.logging_service import LoggingService
from config import TIMEZONE
# --- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ ---
from modules.ai_service import get_reflection_summary # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ò–ú–ü–û–†–¢–ê ---
from modules.card_of_the_day import get_main_menu

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Router –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
# (–û—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, callback_query,
#  –∏–ª–∏ –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º. –ï—Å–ª–∏ –Ω–µ—Ç - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
reflection_router = Router()

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
MSG_INTRO = "–î–∞–≤–∞–π –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏–º —ç—Ç–æ—Ç –¥–µ–Ω—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç üåô"
ASK_GOOD_MOMENTS = "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ? –ß—Ç–æ –ø–æ–¥–∞—Ä–∏–ª–æ —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å, —Ç–µ–ø–ª–æ –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ?"
ASK_GRATITUDE = "–ó–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å?"
ASK_HARD_MOMENTS = "–ë—ã–ª–∏ –ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–º–∏? –ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å?"
MSG_CONCLUSION = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∞ —Å–µ–±–µ —ç—Ç–æ –≤–Ω–∏–º–∞–Ω–∏–µ. –¢—ã –º–æ–ª–æ–¥–µ—Ü.\n–ü—É—Å—Ç—å –Ω–æ—á—å –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π, –∞ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–º –Ω–∞—á–∞–ª–æ–º ‚ú®"
MSG_INPUT_ERROR = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–º."
MSG_AI_SUMMARY_PREFIX = "‚ú® –ù–µ–±–æ–ª—å—à–æ–π –∏—Ç–æ–≥ —Ç–≤–æ–µ–≥–æ –¥–Ω—è:\n\n" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è AI —Ä–µ–∑—é–º–µ
MSG_AI_SUMMARY_FAIL = "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–∏—Ç–æ–≥, –Ω–æ —Ç–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã!" # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ AI

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def start_evening_reflection(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–ù–∞—á–∞–ª–æ —Ñ–ª–æ—É '–ò—Ç–æ–≥ –¥–Ω—è'."""
    user_id = message.from_user.id
    await logger_service.log_action(user_id, "evening_reflection_started")
    await message.answer(MSG_INTRO)
    await message.answer(ASK_GOOD_MOMENTS)
    await state.set_state(UserState.waiting_for_good_moments)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_good_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–æ—Ä–æ—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(good_moments=answer)
    await logger_service.log_action(user_id, "evening_reflection_good_provided", {"length": len(answer)})
    await message.answer(ASK_GRATITUDE)
    await state.set_state(UserState.waiting_for_gratitude)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_gratitude(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."""
    user_id = message.from_user.id
    answer = message.text.strip()
    if not answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(gratitude=answer)
    await logger_service.log_action(user_id, "evening_reflection_gratitude_provided", {"length": len(answer)})
    await message.answer(ASK_HARD_MOMENTS)
    await state.set_state(UserState.waiting_for_hard_moments)

# –£–ë–†–ê–ù –î–ï–ö–û–†–ê–¢–û–† @reflection_router.message(...)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ main.py, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ dp
async def process_hard_moments(message: types.Message, state: FSMContext, db: Database, logger_service: LoggingService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ä–µ–∑—é–º–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    hard_moments_answer = message.text.strip()
    if not hard_moments_answer:
        await message.reply(MSG_INPUT_ERROR)
        return

    await state.update_data(hard_moments=hard_moments_answer)
    await logger_service.log_action(user_id, "evening_reflection_hard_provided", {"length": len(hard_moments_answer)})

    # --- –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AI ---
    data = await state.get_data()
    ai_summary_text = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—é–º–µ
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∑—é–º–µ
        await message.bot.send_chat_action(user_id, 'typing') # <--- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        ai_summary_text = await get_reflection_summary(user_id, data, db)

        if ai_summary_text:
            await message.answer(f"{MSG_AI_SUMMARY_PREFIX}<i>{ai_summary_text}</i>", parse_mode="HTML") # –î–æ–±–∞–≤–ª–µ–Ω parse_mode HTML
            await logger_service.log_action(user_id, "evening_reflection_summary_sent")
        else:
            # –ï—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ ai_service)
            await message.answer(MSG_AI_SUMMARY_FAIL)
            await logger_service.log_action(user_id, "evening_reflection_summary_failed", {"reason": "AI service returned None"})

    except Exception as ai_err:
        logger.error(f"Error during AI reflection summary generation for user {user_id}: {ai_err}", exc_info=True)
        await message.answer(MSG_AI_SUMMARY_FAIL) # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await logger_service.log_action(user_id, "evening_reflection_summary_failed", {"reason": str(ai_err)})
        ai_summary_text = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –ë–î –Ω–µ –∑–∞–ø–∏—à–µ—Ç—Å—è –æ—à–∏–±–∫–∞
    # --- –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AI ---

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î (–≤–∫–ª—é—á–∞—è ai_summary_text, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å None)
    good_moments = data.get("good_moments")
    gratitude = data.get("gratitude")

    try:
        today_str = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        created_at_iso = datetime.now(TIMEZONE).isoformat()
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ë–ò–†–ê–ï–ú await –ü–ï–†–ï–î db.save_evening_reflection ---
        db.save_evening_reflection(
            user_id=user_id,
            date=today_str,
            good_moments=good_moments,
            gratitude=gratitude,
            hard_moments=hard_moments_answer,
            created_at=created_at_iso,
            ai_summary=ai_summary_text # <--- –ü–ï–†–ï–î–ê–ï–ú –†–ï–ó–Æ–ú–ï
        )
        # –õ–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ db.save_evening_reflection
        await logger_service.log_action(user_id, "evening_reflection_saved_to_db") # –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—â–∏–π –ª–æ–≥
    except Exception as db_err:
        logger.error(f"Failed to save evening reflection for user {user_id}: {db_err}", exc_info=True)
        await message.answer("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–æ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å)!")
        # –í–∞–∂–Ω–æ: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è
        await state.clear()
        return # –í—ã—Ö–æ–¥–∏–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é)
    await message.answer(MSG_CONCLUSION, reply_markup=await get_main_menu(user_id, db))
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
