# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç.
"""

import pytest
import os
from unittest.mock import patch
from config import (
    TOKEN, CHANNEL_ID, BOT_LINK, TIMEZONE, ADMIN_ID,
    YANDEX_API_KEY, YANDEX_FOLDER_ID, YANDEX_GPT_URL,
    GROK_API_KEY, GROK_API_URL, NO_CARD_LIMIT_USERS,
    NO_LOGS_USERS, DATA_DIR
)
from strings import (
    UNIVERSE_ADVICE_LIST, START_NEW_USER_MESSAGE, START_EXISTING_USER_MESSAGE,
    RESOURCE_LEVELS, MAIN_MENU_CARD_OF_DAY, MAIN_MENU_EVENING_SUMMARY,
    MAIN_MENU_UNIVERSE_HINT, DEFAULT_NAME
)


class TestConfig:
    """–¢–µ—Å—Ç—ã –¥–ª—è config.py."""

    def test_token_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        assert TOKEN == "test_token_12345"

    def test_yandex_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YandexGPT."""
        assert YANDEX_API_KEY == "test_yandex_key"
        assert YANDEX_FOLDER_ID == "test_folder_id"
        assert YANDEX_GPT_URL == "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    def test_grok_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Grok."""
        assert GROK_API_KEY == "test_grok_key"
        assert GROK_API_URL == "https://api.x.ai/v1/chat/completions"

    def test_constants(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç."""
        assert CHANNEL_ID == "@TopPsyGame"
        assert BOT_LINK == "t.me/choose_a_card_bot"
        assert ADMIN_ID == 6682555021
        assert DATA_DIR == "/data"

    def test_user_lists(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        assert isinstance(NO_CARD_LIMIT_USERS, list)
        assert isinstance(NO_LOGS_USERS, list)
        assert 6682555021 in NO_CARD_LIMIT_USERS
        assert 6682555021 in NO_LOGS_USERS

    def test_timezone(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
        assert TIMEZONE is not None
        assert str(TIMEZONE) == "Europe/Moscow"


class TestStrings:
    """–¢–µ—Å—Ç—ã –¥–ª—è strings.py."""

    def test_universe_advice_list(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –í—Å–µ–ª–µ–Ω–Ω–æ–π."""
        assert isinstance(UNIVERSE_ADVICE_LIST, list)
        assert len(UNIVERSE_ADVICE_LIST) > 0
        assert all(isinstance(advice, str) for advice in UNIVERSE_ADVICE_LIST)
        assert all("<b>üíå" in advice for advice in UNIVERSE_ADVICE_LIST)

    def test_start_messages(self):
        """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start."""
        assert isinstance(START_NEW_USER_MESSAGE, str)
        assert isinstance(START_EXISTING_USER_MESSAGE, str)
        assert "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π" in START_NEW_USER_MESSAGE
        assert "{name}" in START_EXISTING_USER_MESSAGE

    def test_resource_levels(self):
        """–¢–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π —Ä–µ—Å—É—Ä—Å–∞."""
        assert isinstance(RESOURCE_LEVELS, dict)
        assert "resource_good" in RESOURCE_LEVELS
        assert "resource_medium" in RESOURCE_LEVELS
        assert "resource_low" in RESOURCE_LEVELS
        assert "üòä –•–æ—Ä–æ—à–æ" in RESOURCE_LEVELS.values()
        assert "üòê –°—Ä–µ–¥–Ω–µ" in RESOURCE_LEVELS.values()
        assert "üòî –ù–∏–∑–∫–æ" in RESOURCE_LEVELS.values()

    def test_main_menu_buttons(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        assert MAIN_MENU_CARD_OF_DAY == "‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è"
        assert MAIN_MENU_EVENING_SUMMARY == "üåô –ò—Ç–æ–≥ –¥–Ω—è"
        assert MAIN_MENU_UNIVERSE_HINT == "üíå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π"

    def test_default_name(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–º–µ–Ω–∏."""
        assert DEFAULT_NAME == "–î—Ä—É–≥"

    def test_string_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫."""
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º
        formatted_message = START_EXISTING_USER_MESSAGE.format(name="–ê–Ω–Ω–∞")
        assert "–ê–Ω–Ω–∞" in formatted_message
        assert "—Å–Ω–æ–≤–∞ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å" in formatted_message

        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–º–µ–Ω–∏
        formatted_message_no_name = START_EXISTING_USER_MESSAGE.format(name="")
        assert "—Å–Ω–æ–≤–∞ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å" in formatted_message_no_name

    def test_all_strings_are_strings(self):
        """–¢–µ—Å—Ç, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏."""
        string_constants = [
            START_NEW_USER_MESSAGE, START_EXISTING_USER_MESSAGE,
            MAIN_MENU_CARD_OF_DAY, MAIN_MENU_EVENING_SUMMARY,
            MAIN_MENU_UNIVERSE_HINT, DEFAULT_NAME
        ]
        
        for constant in string_constants:
            assert isinstance(constant, str), f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {constant} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π"

    def test_universe_advice_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–≤–µ—Ç–æ–≤ –í—Å–µ–ª–µ–Ω–Ω–æ–π."""
        for advice in UNIVERSE_ADVICE_LIST:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ç–µ–≥–∏
            assert "<b>" in advice
            assert "</b>" in advice
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏
            assert "üíå" in advice
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–≤–µ—Ç–∞
            assert len(advice) > 20, f"–°–æ–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {advice}"


class TestConfigIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

    def test_config_with_missing_env_vars(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        with patch.dict(os.environ, {}, clear=True):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å config
            import importlib
            import config
            importlib.reload(config)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å—Ç–∞–ª–∏ None
            assert config.TOKEN is None
            assert config.YANDEX_API_KEY is None
            assert config.YANDEX_FOLDER_ID is None
            assert config.GROK_API_KEY is None

    def test_config_with_partial_env_vars(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        with patch.dict(os.environ, {
            'TELEGRAM_BOT_TOKEN': 'partial_token',
            'YANDEX_API_KEY': 'partial_yandex_key'
        }):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å config
            import importlib
            import config
            importlib.reload(config)
            
            assert config.TOKEN == 'partial_token'
            assert config.YANDEX_API_KEY == 'partial_yandex_key'
            assert config.YANDEX_FOLDER_ID is None
            assert config.GROK_API_KEY is None 